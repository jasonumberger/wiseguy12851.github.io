02/04/2015
    Gulpfile
    ===================
    Gulpfile has yet again been rewritten ground-up, this time combining the old
    style with the new style. There will be a build folder and all generated 
    elements will be placed in that build whether it be temporary files or
    permanent files.
    
    Despite that much of the last revision will be kept, all files will be
    copied over and will be included with the temporary and generated files
    and all will be made available to the client.
    
    On top of that, dozens of gulp plugins have been added and some removed.
    Many new plugins were added to help speedup, optimize, and make more
    intelligent and flexible the gulp tasks and pipelining.
    
    Also the Model, View, Controller approach was taken for gulp tasks to further
    enahnce gulp and its performance, cleanly code, duplicate prevention, 
    and documentation. The config folder (model equivelant) holds all data
    and configurations, the tasks folder (view equivelant) holds all the
    tasks but contains no logic of its own, merely references the logic.
    The logic folder (controller equivelant) holds all of the actual logic
    throughout the gulp file whether directly or indirectly used by tasks.
    
    Tons of plugins like plumber, sequencer, and lots more make it easier.
    Lazypipes also allows building pipes in logic and extedning them where
    needed then referencing the final pipe build in tasks. Other plugins
    make heavy use of cache and drastically speedup performance. The
    list goes on.

01/26/2015
    Gulpfile:
    ===================
    Gulpfile has drastically changed once again, its been very long needing a
    rewrite. The old gulpfile mapped source folders to destination folders
    and did a complete build and re-copy from scratch everytime. While this
    worked great it also meant any little change would require a 5-10 minute
    re-build and made gulp.watch useless

     The new gulpfile takes a very different and largely more simplistic
     approach. Rather than take node/bower libraries and app source code and
     map it to different folders and such (Quite a complicated build process)
     It instead simply converts typescript and stylus to css in a generated
     folder and copies some fonts over. Then builds and minifies.

     Essentially there is no mapping of folders, the client folder is served
     as-is, exactly how you see it. Anything generated will be in the
     generated folder so it can safely be deleted. Some files are generated
     at the client root but gulp knows how to clean them up with the commands.

     This also allows bypassing the concatenated and/or minified files and
     just using the individual files where desired. It also allows viewing or
     downloading the raw typescript or stylus files and presents many future
     oppurtunities like serving up typescript files and converting them
     on-the-fly with middleware

     Gulp also now precompiles the libraries over, this is important as you
     wont get any of the libraries unless you run the "Precompile" task first
